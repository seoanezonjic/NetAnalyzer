<%! # Environment to import libraries
	import os
	import base64
	import json
	import zlib
	import sys
	import matplotlib
	import matplotlib.pyplot as plt
	import random
	from collections import defaultdict
%>
<!DOCTYPE html>

<html lang="en">
  <head>
    <title>NetAnalyzer model generated with SigmaJS example</title>
	<!-- https://www.bsimard.com/2018/04/25/graph-viz-with-sigmajs.html -->
	<!-- <script src='https://cdnjs.cloudflare.com/ajax/libs/sigma.js/2.0.0-beta5/sigma.min.js'></script> -->
	   <!-- Sigma core -->
<!-- Sigma core -->
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/sigma.core.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/conrad.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/utils/sigma.utils.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/utils/sigma.polyfills.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/sigma.settings.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/classes/sigma.classes.dispatcher.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/classes/sigma.classes.configurable.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/classes/sigma.classes.graph.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/classes/sigma.classes.camera.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/classes/sigma.classes.quad.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/classes/sigma.classes.edgequad.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/captors/sigma.captors.mouse.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/captors/sigma.captors.touch.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/sigma.renderers.canvas.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/sigma.renderers.webgl.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/sigma.renderers.svg.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/sigma.renderers.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.labels.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.hovers.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.nodes.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edges.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edges.curve.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edges.arrow.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edges.curvedArrow.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edgehovers.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edgehovers.curve.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edgehovers.arrow.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.edgehovers.curvedArrow.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/canvas/sigma.canvas.extremities.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.edges.arrow.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.edges.def.js"></script>    
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.edges.fast.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.edges.thickLine.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.edges.thickLineCPU.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.edges.thickLineGPU.js"></script>    
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.nodes.def.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/renderers/webgl/sigma.webgl.nodes.fast.js"></script>	
	<script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/middlewares/sigma.middlewares.rescale.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/middlewares/sigma.middlewares.copy.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/misc/sigma.misc.animation.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/misc/sigma.misc.bindEvents.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/misc/sigma.misc.bindDOMEvents.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/src/misc/sigma.misc.drawHovers.js"></script>
    <!-- Sigma plugins -->
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/plugins/sigma.layout.forceAtlas2/supervisor.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sigma@1.2.1/plugins/sigma.layout.forceAtlas2/worker.js"></script>
		<% 
			with open(os.path.join(TEMPLATES, 'pako.min.js'), 'rb') as f:
				js_base64 = base64.b64encode(f.read()).decode('UTF-8')
		%>
		<script src="data:application/javascript;base64,${js_base64}" type="application/javascript"></script>
    <style>
		html { height:800px;}
		body {height: 100%; margin:0;}
		#sigma-container { width:100%; height:100%; background-color:#E1E1E1}
    </style>
  </head>
  <body>
    <div id='sigma-container'></div>

		<% 
			colors = plt.get_cmap("tab10")
			model = {'nodes': [], 'edges': []} 
			groups_index = defaultdict(lambda: matplotlib.colors.rgb2hex(colors(0)))
			if len(net.reference_nodes) == 0: # If there are ref nodes, reserve group index 1 for them
				add = 1  
			else: 
				add = 2 
			if options.get('group') == 'layer':
				for nodeID, attr in net.graph.nodes(data=True):
					groups_index[nodeID] = net.layers.index(attr['layer']) + add
			else:
				for i, gr in enumerate(net.group_nodes.values()):
					for gr_node in gr: groups_index[gr_node] = i + add

			for nodeID in net.graph.nodes:
				if nodeID in net.reference_nodes:
					color = matplotlib.colors.rgb2hex(colors(0))
				else:
					color = groups_index[nodeID]
				model['nodes'].append({'id': nodeID, 'color': color, 'x': random.randrange(1000),  'y': random.randrange(1000), 'size': 1})

			for i, e in enumerate(net.graph.edges): 
				model['edges'].append({'id': i, 'source': e[0], 'target': e[1], 'color': '#202020', 'size': 0.1})
			
			network = base64.b64encode(zlib.compress(json.dumps(model).encode('UTF-8'))).decode('UTF-8')
		%>

    <script>
		let model = JSON.parse(pako.inflate(atob("${network}"), { to: 'string' }));

		 // Initialise sigma:
		var s = new sigma(
		  {
		    renderer: {
		      container: document.getElementById('sigma-container'),
		      type: 'webgl'
		    },
		    settings: {
		      minArrowSize: 10,
			  maxNodeSize: 2,
			  minEdgeSize: 0.1,
			  maxEdgeSize: 0.15,
			  autoRescale: ['nodePosition', 'nodeSize']
		    }
		  }
		);

		// load the graph
		s.graph.read(model);
		// draw the graph
		s.refresh();
		// launch force-atlas for 5sec
		s.startForceAtlas2({worker: true, barnesHutOptimize: false});
		window.setTimeout(function() {s.killForceAtlas2()}, 3000);
    </script>
  </body>
</html>